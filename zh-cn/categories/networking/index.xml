<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Networking on Yeelight の 小屋</title>
        <link>https://FeiNiaoBF.github.io/zh-cn/categories/networking/</link>
        <description>Recent content in Networking on Yeelight の 小屋</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Example Person. All rights reserved.</copyright>
        <lastBuildDate>Tue, 11 Jun 2024 22:49:31 +0800</lastBuildDate><atom:link href="https://FeiNiaoBF.github.io/zh-cn/categories/networking/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Http 是什么</title>
        <link>https://FeiNiaoBF.github.io/zh-cn/p/http-%E6%98%AF%E4%BB%80%E4%B9%88/</link>
        <pubDate>Tue, 11 Jun 2024 22:49:31 +0800</pubDate>
        
        <guid>https://FeiNiaoBF.github.io/zh-cn/p/http-%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
        <description>&lt;p&gt;在这篇文章里，可以学习到现代网络的工作模式
比如：什么是http、Web&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;why-need-network&#34;&gt;Why need network？&lt;/h2&gt;
&lt;p&gt;军事方面、信息交换、跨地域传输、业务连接&amp;hellip; &amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;网络&lt;/strong&gt;已经成为现代社会不可或缺的基础设施，它极大地促进了信息的流通、资源的共享和全球化的进程。&lt;/p&gt;
&lt;p&gt;看来我们为了满足需要，我们要规范 &lt;strong&gt;network&lt;/strong&gt; ，因此出现HTTP&lt;/p&gt;
&lt;h2 id=&#34;what-is-http&#34;&gt;What is HTTP?&lt;/h2&gt;
&lt;p&gt;HTTP 是基于 &lt;strong&gt;TCP/IP（传输层）&lt;/strong&gt; 的&lt;strong&gt;应用层&lt;/strong&gt;通信协议，它标准化了客户端和服务器之间的&lt;strong&gt;通信&lt;/strong&gt;方式。定义了如何通过互联网&lt;strong&gt;请求（Requests）&lt;/strong&gt; 和 &lt;strong&gt;传输（Transmissions）&lt;/strong&gt; 内容。&lt;/p&gt;
&lt;p&gt;通过应用层协议（客户端和服务器之间的通信方式抽象层），HTTP 本身依赖于 TCP/IP 来获取客户端和服务器之间的请求和响应。默认使用 TCP 端口 80。&lt;/p&gt;
&lt;p&gt;在 http 中的主要流程为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;浏览器 -&amp;gt; 服务器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;![[Pasted image 20240526132924.png]]&lt;/p&gt;
&lt;h2 id=&#34;http-version&#34;&gt;HTTP Version&lt;/h2&gt;
&lt;p&gt;HTTP 的历代版本&lt;/p&gt;
&lt;h3 id=&#34;http09&#34;&gt;HTTP/0.9&lt;/h3&gt;
&lt;p&gt;有史以来最简单的协议，只有一个名为 GET 的方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;响应必须是 HTML 文件&lt;/li&gt;
&lt;li&gt;只有 GET&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http10&#34;&gt;HTTP/1.0&lt;/h3&gt;
&lt;p&gt;HTTP 的大发展
可以处理其他响应格式，即&lt;strong&gt;图像&lt;/strong&gt;、&lt;strong&gt;视频文件&lt;/strong&gt;、&lt;strong&gt;纯文本&lt;/strong&gt;或&lt;strong&gt;任何其他内容&lt;/strong&gt;类型。它添加 &lt;code&gt;POST&lt;/code&gt; 和 &lt;code&gt;HEAD&lt;/code&gt; 方法、更改了请求/响应 &lt;strong&gt;格式&lt;/strong&gt;、将 HTTP &lt;strong&gt;标头&lt;/strong&gt;添加到请求和响应中、添加了&lt;strong&gt;状态代码&lt;/strong&gt;来&lt;strong&gt;标识响应&lt;/strong&gt;、还有引入了字符集支持、多部分类型、授权、缓存、内容编码等都包括在内。&lt;/p&gt;
&lt;p&gt;请求：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;GET&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;HTTP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;响应：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;HTTP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;OK&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;HTTP/1.0 的主要缺点&lt;/p&gt;
&lt;!-- TODO LINK --&gt;
&lt;p&gt;🚧🚧🚧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无持久连接 &amp;mdash;  [[Three-way Handshake(三次握手)]]&lt;/li&gt;
&lt;li&gt;队头阻塞&lt;/li&gt;
&lt;li&gt;请求方法有限&lt;/li&gt;
&lt;li&gt;头部信息冗余&lt;/li&gt;
&lt;li&gt;缓存有限&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http11&#34;&gt;HTTP/1.1&lt;/h3&gt;
&lt;p&gt;相比于 HTTP/1.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;持久连接&lt;/strong&gt;&lt;/em&gt; &amp;mdash; 允许多个连续请求&lt;/li&gt;
&lt;li&gt;添加了新的方法，其中引入了 &lt;code&gt;PUT&lt;/code&gt;、&lt;code&gt;PATCH&lt;/code&gt;、&lt;code&gt;OPTIONS&lt;/code&gt;、&lt;code&gt;DELETE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;主机名&lt;strong&gt;标识&lt;/strong&gt;在 HTTP/1.1 使其成为必要的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pipelining&lt;/strong&gt; 管道化&lt;/li&gt;
&lt;li&gt;更多的状态码&lt;/li&gt;
&lt;li&gt;等等&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;更多 &lt;a class=&#34;link&#34; href=&#34;https://datatracker.ietf.org/doc/html/rfc2616&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RFC 2616&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;队头阻塞（Head-of-line Blocking）&lt;/strong&gt;：虽然HTTP/1.1 支持管道化，但由于TCP的特性，如果前一个请求的响应延迟，后续请求仍然会被阻塞。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能瓶颈&lt;/strong&gt;：由于HTTP/1.1 仍然依赖于文本格式的头部信息，这可能导致较大的数据传输量和解析延迟。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不支持服务器推送&lt;/strong&gt;：HTTP/1.1 不支持服务器主动向客户端推送资源，所有资源都需要客户端明确请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;头部冗余&lt;/strong&gt;：HTTP/1.1 的头部信息在每次请求中都会重复发送，尤其是在使用Cookie等机制时，增加了数据传输量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺乏对现代Web应用的支持&lt;/strong&gt;：随着Web应用变得越来越复杂，HTTP/1.1 在处理大量并发请求、实时数据传输等方面显得力不从心。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;spdy-from-google&#34;&gt;SPDY (from Google)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;SPDY也就是&lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/wiki/HTTP/2&#34;  title=&#34;HTTP/2&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HTTP/2&lt;/a&gt;的前身&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;http2&#34;&gt;HTTP/2&lt;/h3&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;二进制分帧&lt;/strong&gt;（Frames and Streams）
HTTP/2 将数据分割成更小的&lt;strong&gt;二进制&lt;/strong&gt;帧，每个帧都有自己的类型和流标识符。这种分帧机制使得数据传输更加高效，并且可以实现多路复用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I/O多路复用&lt;/strong&gt;：
HTTP/2 允许在单个连接上&lt;strong&gt;并行&lt;/strong&gt;处理多个请求和响应，消除了 HTTP/1.x 中的队头阻塞问题，提高了页面加载速度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;头部压缩&lt;/strong&gt;：
HTTP/2 使用 &lt;strong&gt;HPACK&lt;/strong&gt; 算法压缩头部信息，减少了数据传输量，降低了延迟。(Huffman Code ?)
&lt;a class=&#34;link&#34; href=&#34;https://datatracker.ietf.org/doc/html/rfc7541&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RFC7541&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务器推送&lt;/strong&gt;：
HTTP/2 支持服务器&lt;strong&gt;主动&lt;/strong&gt;向客户端推送资源，即服务器可以在客户端请求之前发送客户端可能需要的资源，提高了页面加载效率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优先级和依赖&lt;/strong&gt;：
HTTP/2 允许客户端指定请求的优先级，服务器可以根据这些信息优化资源的传输顺序。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保持连接&lt;/strong&gt;：
HTTP/2 默认使用持久连接，减少了连接建立和断开的开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;兼容性&lt;/strong&gt;：
HTTP/2 保持了与 HTTP/1.x 的语义兼容性，现有的应用可以无需修改或只需少量修改即可迁移到 HTTP/2。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;实现复杂性&lt;/strong&gt;：HTTP/2 的二进制分帧和多路复用机制增加了协议实现的复杂性，对服务器和客户端的实现提出了更高的要求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全依赖&lt;/strong&gt;：虽然 HTTP/2 本身不强制要求使用加密，但大多数浏览器和服务器实现都要求使用 HTTPS，这增加了部署的复杂性和成本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;队头阻塞问题&lt;/strong&gt;：虽然 HTTP/2 在应用层解决了队头阻塞问题，但在TCP层仍然存在队头阻塞，因为TCP协议本身是按顺序传输数据的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务器推送的挑战&lt;/strong&gt;：服务器推送虽然可以提高性能，但如果不当使用，可能会导致资源浪费或客户端缓存问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;兼容性问题&lt;/strong&gt;：虽然HTTP/2 与 HTTP/1.x 语义兼容，但在实际部署中可能会遇到一些兼容性问题，尤其是在旧的网络设备和中间件上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能提升有限&lt;/strong&gt;：对于一些优化良好的HTTP/1.x 网站，迁移到 HTTP/2 可能不会带来显著的性能提升。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;ssltlshttps&#34;&gt;SSL、TLS、HTTPS&lt;/h2&gt;
&lt;p&gt;？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SSL/TLS&lt;/strong&gt;：这两个协议位于应用层和传输层之间，为上层协议提供加密服务。它们负责在客户端和服务器之间建立安全的通信通道。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTPS&lt;/strong&gt;：这是一个应用层协议，它使用SSL/TLS来保护HTTP通信的安全。HTTPS是HTTP和SSL/TLS的结合体，它使得Web浏览器和服务器之间的通信变得安全。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;继续学习-http-的详解&#34;&gt;继续学习 HTTP 的详解&lt;/h2&gt;
&lt;h3 id=&#34;http-请求包&#34;&gt;HTTP 请求包&lt;/h3&gt;
&lt;p&gt;🚧🚧🚧&lt;/p&gt;
&lt;h3 id=&#34;http-响应包&#34;&gt;HTTP 响应包&lt;/h3&gt;
&lt;p&gt;🚧🚧🚧
&lt;strong&gt;响应头&lt;/strong&gt;（Response Headers）是在 HTTP 响应中发送的一组&lt;strong&gt;键值对（key-value pair）&lt;/strong&gt;，它们提供了关于响应的&lt;strong&gt;元数据信息&lt;/strong&gt;，如&lt;strong&gt;内容类型&lt;/strong&gt;、&lt;strong&gt;内容长度&lt;/strong&gt;、&lt;strong&gt;缓存控制&lt;/strong&gt;、&lt;strong&gt;服务器信息&lt;/strong&gt;等。响应头位于 HTTP 响应的起始行（状态行）之后，响应体之前，并且以空行（CRLF）与响应体分隔。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-HTTP&#34; data-lang=&#34;HTTP&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;HTTP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.1&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;OK&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;text/html; charset=UTF-8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Content-Length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;1234&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;Mon, 21 Oct 2019 07:28:00 GMT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Server&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;Apache&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;http-的方法&#34;&gt;HTTP 的方法&lt;/h3&gt;
&lt;h3 id=&#34;http-的状态码&#34;&gt;HTTP 的状态码&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1 XX 提示信息 - 表示请求已被成功接收，继续处理&lt;/li&gt;
&lt;li&gt;2 XX 成功 - 表示请求已被成功接收，理解，接受&lt;/li&gt;
&lt;li&gt;3 XX 重定向 - 要完成请求必须进行更进一步的处理&lt;/li&gt;
&lt;li&gt;4 XX 客户端错误 - 请求有语法错误或请求无法实现&lt;/li&gt;
&lt;li&gt;5 XX 服务器端错误 - 服务器未能实现合法的请求&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;外部链接&#34;&gt;外部链接&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://cs.fyi/guide/http-in-depth&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;什么是HTTP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/SPDY&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SPDY&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HTTP docs&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
