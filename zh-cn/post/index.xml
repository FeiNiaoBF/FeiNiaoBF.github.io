<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Yeelight の 小屋</title>
        <link>https://FeiNiaoBF.github.io/zh-cn/post/</link>
        <description>Recent content on Yeelight の 小屋</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Example Person. All rights reserved.</copyright>
        <lastBuildDate>Mon, 20 May 2024 10:54:30 +0800</lastBuildDate><atom:link href="https://FeiNiaoBF.github.io/zh-cn/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>博客搭建更新日记✨</title>
        <link>https://FeiNiaoBF.github.io/zh-cn/p/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%9B%B4%E6%96%B0%E6%97%A5%E8%AE%B0/</link>
        <pubDate>Wed, 08 Mar 2023 19:56:58 +0800</pubDate>
        
        <guid>https://FeiNiaoBF.github.io/zh-cn/p/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%9B%B4%E6%96%B0%E6%97%A5%E8%AE%B0/</guid>
        <description>&lt;img src="https://s2.loli.net/2024/04/08/bN8h1ZycAzF5MHu.jpg" alt="Featured image of post 博客搭建更新日记✨" /&gt;&lt;h2 id=&#34;hello&#34;&gt;Hello&lt;/h2&gt;
&lt;p&gt;你好，这是，这里面是记录我对自己的博客 web 更新的日记。&lt;/p&gt;
&lt;h2 id=&#34;march-102023&#34;&gt;March 10，2023&lt;/h2&gt;
&lt;p&gt;博客使用 hugo 了&lt;/p&gt;
&lt;h2 id=&#34;april-20-2023&#34;&gt;April 20, 2023&lt;/h2&gt;
&lt;p&gt;我使用了图床，蛮好用的 😁&lt;/p&gt;
&lt;h2 id=&#34;april-25-2023&#34;&gt;April 25, 2023&lt;/h2&gt;
&lt;p&gt;我更新了一些社交方式&lt;/p&gt;
&lt;p&gt;更新一下我的博客的配置&lt;/p&gt;
&lt;h2 id=&#34;mar-102024&#34;&gt;Mar 10，2024&lt;/h2&gt;
&lt;p&gt;好久不见了，这一次我把近一年的笔记进行一个整理，然后更新到了博客上。
也做了许多的计划和之后的规划&lt;/p&gt;
</description>
        </item>
        <item>
        <title>CS学习计划</title>
        <link>https://FeiNiaoBF.github.io/zh-cn/p/cs%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</link>
        <pubDate>Sun, 10 Mar 2024 15:58:41 +0800</pubDate>
        
        <guid>https://FeiNiaoBF.github.io/zh-cn/p/cs%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</guid>
        <description>&lt;img src="https://s2.loli.net/2024/04/08/Xej8au1VkhZN4HT.jpg" alt="Featured image of post CS学习计划" /&gt;&lt;h2 id=&#34;计算机语言基础&#34;&gt;计算机语言基础&lt;/h2&gt;
&lt;h3 id=&#34;c-语言&#34;&gt;C 语言&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;项目练习&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;go-语言&#34;&gt;Go 语言&lt;/h3&gt;
&lt;p&gt;———&amp;gt; &lt;a class=&#34;link&#34; href=&#34;https://FeiNiaoBF.github.io/zh-cn/post/gohh/1.computerbasics/cslanguages/golang/&#34; &gt;Go 语言学习&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;项目练习&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;python-语言&#34;&gt;python 语言&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;项目练习&lt;/strong&gt;&lt;/p&gt;
&lt;!-- 1. [TG_bot]() --&gt;
&lt;h2 id=&#34;数据结构&#34;&gt;数据结构&lt;/h2&gt;
&lt;p&gt;数据结构是对计算机高级语言最能体现打基础的学习，目前有许多常见的数据结构，我喜欢分类来处理。&lt;/p&gt;
&lt;h3 id=&#34;基础结构hahahugoshortcode41s2hbhb&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://FeiNiaoBF.github.io/zh-cn/post/gohh/2.datastructures_algorithms/golangds/&#34; &gt;基础结构&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数组&lt;/strong&gt;：是一种线性表数据结构，用于存储相同类型的数据元素。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;em&gt;二分搜索&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;em&gt;冒泡排序&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;em&gt;动态规划&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip; &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;链表&lt;/strong&gt;：由一系列节点组成的数据结构，每个节点包含数据和指向下一个节点的指针。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;em&gt;反转链表&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;em&gt;环形链表&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;em&gt;LRU 缓存算法&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip; &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;栈&lt;/strong&gt;：一种遵循后进先出（LIFO）原则的数据结构，只允许在表的一端进行插入和删除操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;队列&lt;/strong&gt;：一种遵循先进先出（FIFO）原则的数据结构，允许在表的一端进行插入，在另一端进行删除操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;树&lt;/strong&gt;：一种非线性数据结构，由节点组成，节点之间存在层次关系。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;图&lt;/strong&gt;：由节点（或顶点）和边组成的数据结构，用于表示多对多的关系。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他结构&#34;&gt;其他结构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;并查集&lt;/strong&gt;：一种用于处理不相交集合的数据结构，常用于解决连接性问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;字典树&lt;/strong&gt;：一种用于快速检索的树形数据结构，常用于字符串检索。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;散列表&lt;/strong&gt;：利用哈希函数将关键字映射到表中一个位置来访问记录的数据结构。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;树状数组&lt;/strong&gt;：一种高效的数据结构，用于维护序列前缀和的动态查询。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;映射&lt;/strong&gt;：一种将键映射到值的抽象数据类型，常用于快速查找。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集合&lt;/strong&gt;：一种抽象数据类型，用于存储互不相同的元素的集合。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;真实世界&#34;&gt;真实世界&lt;/h3&gt;
&lt;p&gt;在实际项目中，数据结构和算法的选择取决于具体的应用场景和问题需求。一般来说，对于不涉及高精尖、复杂算法的项目，可以尽量选择简单的数据结构。以下是一些建议和实践：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;根据场景选择数据结构&lt;/strong&gt;：静态数组适合元素不超过 100 的场合，动态数组适合元素不超过 1000 的场合，链表适合元素不超过 3000 的场合。在需要动态分配内存的场合，可以考虑使用静态内存，以提高程序稳定性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实际项目中的应用&lt;/strong&gt;：数据结构和算法在实际项目中扮演着重要角色，可以通过实际项目场景来说明一种数据结构解决了什么实际问题，以及其各种操作时间复杂度、优缺点等。这有助于理解数据结构在编程中的重要性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;权衡选择&lt;/strong&gt;：在实际开发中，需要权衡选择使用哪种数据结构和算法。除了考虑算法的时间复杂度、空间复杂度，还需要考虑其在具体场景下的执行效率、易用性、维护成本等因素&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;综上所述，实际项目中的数据结构和算法选择应该根据具体的应用场景和问题需求进行权衡和取舍，以达到最优的解决方案。&lt;/p&gt;
&lt;h2 id=&#34;算法ai&#34;&gt;算法（AI）&lt;/h2&gt;
&lt;p&gt;算法是解决问题的一系列清晰指令，是计算机科学的基础。在实际开发中，选择合适的数据结构和算法对程序的性能和效率至关重要。在学习算法时，需要权衡选择使用哪种数据结构和算法，不能简单地用复杂度来表示执行性能。此外，编程算法面试经验总结中提到，算法面试常涉及的主题、考察形式和评价方式，对求职备考的朋友们有所帮助。另外，算法也在机器学习领域有着广泛的应用，比如预测住房价格、探索客户的人口统计学数据以确定模式等。在实际开发中，对于数组的算法，可以通过合并两个有序数组来进行实现。对于统计相同数字出现的次数，可以利用数组元素下标对应数字，用数组元素的值表示对应数字出现的次数，这是一种典型的空间换时间的算法。如果整数的范围是 1 到 n，可以考虑使用其他的算法来实现。&lt;/p&gt;
&lt;h3 id=&#34;关键要点&#34;&gt;关键要点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;目的和问题解决：&lt;/strong&gt; 算法的设计旨在解决特定问题或执行特定任务。它们用于执行各种计算和操作，从简单的搜索和排序到复杂的图算法和机器学习。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入和输出：&lt;/strong&gt; 算法接受一个或多个输入，通过执行一系列计算操作，产生一个输出。输入可以是数据、问题描述或其他形式的信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有限性：&lt;/strong&gt; 算法是有限步骤的集合，每一步都可以在有限的时间内完成。这确保了算法的执行是可以终止的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确定性：&lt;/strong&gt; 算法的每一步都是确定性的，即对于给定的输入，它总是产生相同的输出。这使得算法在不同的环境中具有可重复性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;效率：&lt;/strong&gt; 算法的效率是一个关键方面，通常通过时间复杂度和空间复杂度来衡量。好的算法能够以较低的时间和空间开销解决问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可读性和可维护性：&lt;/strong&gt; 除了效率，算法的可读性和可维护性也是重要的。一个清晰、简单、易于理解的算法更容易被其他人理解和维护。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;算法的分类&#34;&gt;算法的分类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;搜索算法：&lt;/strong&gt; 用于在数据集中查找特定元素的算法，如线性搜索和二分搜索。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;排序算法：&lt;/strong&gt; 对一组元素进行排列的算法，例如冒泡排序、快速排序、归并排序等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;图算法：&lt;/strong&gt; 处理图数据结构的算法，包括深度优先搜索、广度优先搜索、最短路径算法等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态规划：&lt;/strong&gt; 将复杂问题分解为简单子问题，并通过保存已解决的子问题的解来加速求解的算法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;贪心算法：&lt;/strong&gt; 在每一步选择中都采取当前状态下最好或最优的选择，从而希望得到全局最好或最优解的算法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;回溯算法：&lt;/strong&gt; 通过不断试错找到问题的解，是一种递归的算法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分治算法：&lt;/strong&gt; 将问题分解成相互独立且与原问题相同的子问题，然后递归地解决子问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;随机化算法：&lt;/strong&gt; 使用随机数来解决问题的算法，例如快速排序的随机化版本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;机器学习算法：&lt;/strong&gt; 用于构建模型、分类和预测的一系列算法，如决策树、支持向量机、神经网络等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;算法是计算机科学的核心，它们不仅仅是问题求解的工具，也是构建复杂系统和应对实际挑战的基础。深入理解和熟练运用各种算法，有助于提高问题解决和计算机科学建模的能力。&lt;/p&gt;
&lt;h2 id=&#34;体系结构&#34;&gt;体系结构&lt;/h2&gt;
&lt;h2 id=&#34;操作系统&#34;&gt;操作系统&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://FeiNiaoBF.github.io/zh-cn/post/gohh/4.os/s6.081/&#34; &gt;操作系统的具体学习目录&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;计算机网络&#34;&gt;计算机网络&lt;/h2&gt;
&lt;h2 id=&#34;cs-后续学习路径&#34;&gt;CS 后续学习路径&lt;/h2&gt;
&lt;p&gt;为自身打造的路径&lt;/p&gt;
&lt;p&gt;目标：人工智能&lt;strong&gt;Artificial intelligence&lt;/strong&gt;
数学
&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;Search&amp;mdash;GraphTheory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;Knowledge&amp;mdash;BooleanLogic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;Uncertainty&amp;mdash;Probability&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目标：应用程序开发&lt;strong&gt;Application Developer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;Full Stack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目标：计算机图形学&lt;strong&gt;Computer graphics&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目标：软件工程&lt;strong&gt;Software engineering&lt;/strong&gt;&lt;/p&gt;
&lt;!-- ## LeetCode

每日任务
[合并两个有序数组]()

[移除元素]()

[删除有序数组中的重复项]() --&gt;
</description>
        </item>
        <item>
        <title>Cache Notes</title>
        <link>https://FeiNiaoBF.github.io/zh-cn/p/cache-notes/</link>
        <pubDate>Mon, 13 May 2024 08:39:14 +0800</pubDate>
        
        <guid>https://FeiNiaoBF.github.io/zh-cn/p/cache-notes/</guid>
        <description>&lt;p&gt;&lt;em&gt;资料来源: cs61c&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cache 可以说是计算机技术革命中最伟大的想法了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;想一个问题：在我们的电脑里，指令是怎么控制内存里的东西的？因为我们要运行电脑除了 CPU 以外我们要向外 &lt;code&gt;拿取&lt;/code&gt; 数据才能执行一系列的指令，这样电脑才算运行起来。&lt;/p&gt;
&lt;p&gt;让我们来看下面的这张图，这是十分完整的计算机组成结构：&lt;/p&gt;
&lt;h2 id=&#34;components-of-a-computer&#34;&gt;Components of a Computer&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2023/04/24/Fzb3uHQBLTlqOgD.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Components of a Computer&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;我们可以从中看到在 CPU 需要运行一个进程的时候，首先会将指令告诉主存（main memory）, 然后开始在主存中找地址（Address）找到后加载到在 CPU 内部通用寄存器（register）然后开始执行
执行完后再写入主存中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在这里面还有一个步骤，memory 要先向 disk 中读取数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实现实中，CPU 通用寄存器的速度和主存之间存在着太大的差异。两者之间的速度大致如下关系：
&lt;img src=&#34;https://s2.loli.net/2023/04/24/KtvMSR7QmrXpjbl.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;memory-steep&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Oh!!! 它们相差 1,000 倍左右，这是无法想像的，就比如当我前 1 ns 的时候 CPU 已经做完了，而我还要等 1000 ns 的 memory 的时间，因此在我们看来 CPU 此时是空闲的，大大的浪费了。&lt;/p&gt;
&lt;p&gt;因此，如果我们可以提升主存的速度，那么对于系统来说将会获得很大的性能提升。但我们试图提升主存的速度和容量，又期望其成本很低，这就有点难为人了。因此，我们有一种折中的方法，那就是制作一块速度极快但是容量极小的存储设备。那么其成本也不会太高。这块存储设备我们称之为 &lt;code&gt;cache&lt;/code&gt;。在硬件上，我们将 &lt;code&gt;cache&lt;/code&gt; 放置在 &lt;code&gt;CPU&lt;/code&gt; 和 &lt;code&gt;主存&lt;/code&gt; 之间，作为主存数据的缓存。当 CPU 试图从主存中 load/store 数据的时候， CPU 会首先从 cache 中查找对应地址的数据是否缓存在 cache 中。如果其数据缓存在 cache 中，直接从 cache 中拿到数据并返回给 CPU。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2023/04/24/qLhOmsTV2IE9S8p.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;add-cache.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;其实类比的话，我蛮喜欢 CS 61 c 里面的 Library Analogy，而我自己的想法是有点像现在的物流运输：对一些物品都有一个 &lt;code&gt;主要的仓库&lt;/code&gt;，而也有一些 &lt;code&gt;本地仓&lt;/code&gt;，当我要送东西的时候我先去看看 &lt;code&gt;本地仓&lt;/code&gt; 有没有，没有就再去 &lt;code&gt;主仓&lt;/code&gt; 去看看，但时间上就没有本地仓的快&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[[2. Areas/01 Blog/03-ComputerSystems/cs61c/SRAM vs. DRAM vs. Disk]]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;memory-hierarchy&#34;&gt;Memory Hierarchy&lt;/h2&gt;
&lt;p&gt;好的现在我们知道了 &lt;code&gt;cache&lt;/code&gt; 的出现了，而下面的图是说明了对于不同的内存级别
&lt;img src=&#34;https://s2.loli.net/2023/04/24/3anw1UgNoWDZBsq.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Cache-line.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;cache&#34;&gt;Cache&lt;/h2&gt;
&lt;h3 id=&#34;cache-的级别&#34;&gt;Cache 的级别&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;每一级的 cache 就是每一个下级内存的副本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Cahe 的速度在一定程度上同样影响着系统的性能. 当 cache 中没有缓存我们想要的数据的时候，依然需要漫长的等待从主存中 load 数据。为了进一步提升性能，引入多级 cache。前面提到的 cache，称之为 L 1 cache（第一级 cache）。我们在 L 1 cache 后面连接 L 2 cache，在 L 2 cache 和主存之间连接 L 3 cache。等级越高，速度越慢，容量越大。&lt;/p&gt;
&lt;h3 id=&#34;temporal-locality-时间局部性&#34;&gt;Temporal Locality (时间局部性)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;If a memory location is referenced then it will tend to be referenced again soon&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;比如说我用过一次这个地址, 我保存起来以防我下次使用&lt;/p&gt;
&lt;h3 id=&#34;spatial-locality-空间局部性&#34;&gt;Spatial Locality (空间局部性)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;If a memory location is referenced, the locations with nearby addresses will
Tend to be referenced soon&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;比如一个数组，在我读取的时候它会把数组左右的都读取了&lt;/p&gt;
&lt;h3 id=&#34;cache-hit-vs-cache-miss&#34;&gt;Cache Hit vs Cache Miss&lt;/h3&gt;
&lt;p&gt;在我要对数据进行查找的时候会出现两种情况 &lt;code&gt;Cache Hit&lt;/code&gt; &amp;amp; &lt;code&gt;Cache Miss&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;cache-hit&#34;&gt;Cache hit&lt;/h4&gt;
&lt;p&gt;你要查找的数据 &lt;code&gt;在缓存中&lt;/code&gt; 从缓存中检索数据并将其带到处理器.&lt;/p&gt;
&lt;h4 id=&#34;cache-miss&#34;&gt;Cache miss&lt;/h4&gt;
&lt;p&gt;你要查找的数据 &lt;code&gt;不在缓存中&lt;/code&gt; 去内存中找数据，把数据放到缓存中，带到处理器中&lt;/p&gt;
&lt;h2 id=&#34;cache-的工作原理&#34;&gt;Cache 的工作原理&lt;/h2&gt;
&lt;p&gt;现在我们来继续说一些快取的工作原理, 在此之前先来说一下的一些名词
什么是 &lt;code&gt;line/tag/index/offset/valid&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;line:&lt;/strong&gt; 我们将 cache 平均分成相等的很多块，每一个块大小称之为 &lt;code&gt;cache line&lt;/code&gt; 也可以叫 &lt;code&gt;cache block&lt;/code&gt;，其大小是 &lt;code&gt;cache line size&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tag:&lt;/strong&gt; Used to identify the data (用于识别数据)。每条 Cache Line 前都会有一个独立分配的内存来存 tag，其就是内存地址的前 Nbits。
$$ addressbits -  offsetbits $$&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;offset:&lt;/strong&gt; Identifies the byte offset (标识字节偏移量)。一般是低位后几位。
$$ offset = log_2(line size) $$&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;index:&lt;/strong&gt; 内存地址后续的 bits 则是在这&amp;ndash;Way 的是 Cache Line 索引，可以索引 Cache Line。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Valid bit:&lt;/strong&gt; Tells you if the data stored at a given cache line is valid (告诉您存储在给定缓存行中的数据是否有效)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;一个地址访问要映射到 Cache 中，地址被分成三个字段：tag，set index, block offset。这样，通过一个物理地址就可以获取数据或指令在缓存中的位置 (set, way, byte))&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2023/04/24/mHdMoveGWXkiNL4.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;line-block.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;direct-mapped-cache-直接映射缓存&#34;&gt;Direct mapped cache (直接映射缓存)&lt;/h3&gt;
&lt;p&gt;优点：直接映射缓存在硬件设计上会更加简单，因此成本上也会较低。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一句话, 我一个个的加载进入 cache, 当我的 cache 满了我就转头再来一遍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;只适合于&lt;strong&gt;大容量&lt;/strong&gt;Cache&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;缺点: 继续访问下面的地址时，依然会 cache 缺失。这就相当于每次访问数据都要从主存中读取，所以 cache 的存在并没有对性能提升有效, 有 &lt;code&gt;cache颠簸&lt;/code&gt; (每个主存块只有一个固定位置可存放，容易产生冲突)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2023/04/24/xeav7mlIDAyOwqK.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Direct Mapped.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2023/04/24/4EYI7Va1S5lKgow.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Direct Mapped-cache.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;two-way-set-associative-cache-两路组相连缓存&#34;&gt;Two-way set associative cache (两路组相连缓存)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Cache 分了 2 组&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;优点: 减少 cache 颠簸出现频率&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;组相联映射实际上是直接映射和全相联映射的折中方案&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;缺点: 增加硬件设计复杂读、成本较高 (需要比较多个 cache line 的 TAG)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2023/04/24/yXE8J6RMo9F3Vxq.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;set associative-cache.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;fully-associative-cache-全相连缓存&#34;&gt;Fully Associative Cache (全相连缓存)&lt;/h3&gt;
&lt;p&gt;优点: 最大程度的降低 cache 颠簸的频率&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;只适合于&lt;strong&gt;小容量&lt;/strong&gt;Cache&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;缺点: 增加硬件设计复杂读、成本较高 (需要比较多个 cache line 的 TAG)&lt;/p&gt;
&lt;p&gt;扩展：[[More Eviction Policies]]
&lt;img src=&#34;https://s2.loli.net/2023/07/10/TRUdXNBPsveZS7D.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2023/04/24/76uSATyrPno1eYf.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Fully Associative.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;寻找 Hit 的电路&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2023/04/24/3VYzGo9dkgHwcrS.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Required to Check for Hit&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;[[Types of Misses]]&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2023/04/24/M4Fc1g6k5OrfBpj.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;comparisons&#34;&gt;Comparisons&lt;/h3&gt;
&lt;p&gt;三个 cache 的区别之分
&lt;img src=&#34;https://s2.loli.net/2023/04/24/iICnWkpOMcFtKZH.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Comparisons&#34;
	
	
&gt;
&lt;strong&gt;需补充&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>GDB基本使用</title>
        <link>https://FeiNiaoBF.github.io/zh-cn/p/gdb%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
        <pubDate>Mon, 24 Apr 2023 19:10:36 +0800</pubDate>
        
        <guid>https://FeiNiaoBF.github.io/zh-cn/p/gdb%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
        <description>&lt;h1 id=&#34;gdb调试命令&#34;&gt;gdb调试命令&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;gdb是一个在UNIX环境下的命令行调试工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;进入gdb&#34;&gt;进入gdb&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;# 先进入编译
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gcc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;program&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;program&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;# 编译后在
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gdb&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;program&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;基本命令&#34;&gt;基本命令&lt;/h2&gt;
&lt;h4 id=&#34;1查看源码&#34;&gt;1）查看源码　　&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gdb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;源码会进行行号提示。&lt;/p&gt;
&lt;p&gt;如果需要查看在其他文件中定义的函数，在l后加上函数名即可定位到这个函数的定义及查看附近的其他源码。或者：使用断点或单步运行，到某个函数处使用s进入这个函数。&lt;/p&gt;
&lt;h4 id=&#34;2设置断点&#34;&gt;2）设置断点　　&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gdb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;（&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reak&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;）&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fun&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;or&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gdb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这样会在运行到源码第6行时停止，可以查看变量的值、堆栈情况等；这个行号是gdb的行号。&lt;/p&gt;
&lt;h4 id=&#34;3查看断点处情况&#34;&gt;3）查看断点处情况&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gdb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以键入&amp;quot;info b&amp;quot;来查看断点处情况，可以设置多个断点；&lt;/p&gt;
&lt;h4 id=&#34;4运行代码&#34;&gt;4）运行代码&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gdb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;5显示变量值&#34;&gt;5）显示变量值&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gdb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在程序暂停时，键入&amp;quot;p 变量名&amp;quot;(print)即可；&lt;/p&gt;
&lt;p&gt;GDB在显示变量值时都会在对应值之前加上
&lt;code&gt;$N&lt;/code&gt; 标记，它是当前变量值的引用标记，以后若想再次引用此变量，就可以直接写&lt;code&gt;$N&lt;/code&gt;，而无需写冗长的变量名；&lt;/p&gt;
&lt;h4 id=&#34;6观察变量&#34;&gt;6）观察变量&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gdb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;watch&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt; 在某一循环处，往往希望能够观察一个变量的变化情况，这时就可以键入命令&amp;quot;watch&amp;quot;来观察变量的变化情况，GDB在&amp;quot;n&amp;quot;设置了观察点；&lt;/p&gt;
&lt;h4 id=&#34;7单步运行&#34;&gt;7）单步运行&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gdb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;8程序继续运行&#34;&gt;8）程序继续运行&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gdb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;使程序继续往下运行，直到再次遇到断点或程序结束；&lt;/p&gt;
&lt;h2 id=&#34;完整的gdb调试&#34;&gt;完整的gdb调试&lt;/h2&gt;
&lt;h2 id=&#34;退出gdb&#34;&gt;退出gdb&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;# 输入&amp;#39;q&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gdb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;（施工中🚧）&lt;/p&gt;
</description>
        </item>
        <item>
        <title>MakeFile使用笔记</title>
        <link>https://FeiNiaoBF.github.io/zh-cn/p/makefile%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Mon, 24 Apr 2023 19:08:45 +0800</pubDate>
        
        <guid>https://FeiNiaoBF.github.io/zh-cn/p/makefile%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</guid>
        <description>&lt;h1 id=&#34;makefile的编译和连接&#34;&gt;MakeFile的编译和连接&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;对于大量的c语言文件一个很好的自动化工具,其实可以用到任何语言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;makefile的一般使用&#34;&gt;MakeFile的一般使用&lt;/h2&gt;
&lt;h3 id=&#34;使用规则&#34;&gt;使用规则&lt;/h3&gt;
&lt;p&gt;既然要用MakeFile，那就要知道它是怎么使用的；主要还是&lt;code&gt;编译&lt;/code&gt;&amp;amp;&lt;code&gt;链接&lt;/code&gt;，将大量的文件，通过直接或间接的方式来一键编译，就不必像&lt;code&gt;gcc -g -o pro1.c pro2.c pro3.c... filename&lt;/code&gt;如此这般麻烦的编译了。&lt;/p&gt;
&lt;p&gt;写入Make的文件的规则:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;如果这个工程没有编译过，那么我们的所有c文件都要编译并被链接。&lt;/li&gt;
&lt;li&gt;如果这个工程之中的某几个c文件被修改，那么我们只编译被修改的c文件，并链接目标程序。&lt;/li&gt;
&lt;li&gt;如果这个工程的头文件被改变了，那么我们需要编译引用了这几个头文件的c文件，并链接目标程序。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;对makefile的书写规则：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;target ... &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prerequisites&lt;/span&gt; ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;target:&lt;/strong&gt; 这个是的目标文件，也可以是一个执行文件，还可以是一个标签（label）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;prerequisites:&lt;/strong&gt; 这个是一个依赖文件，是对&lt;code&gt;target&lt;/code&gt;文件的输入。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;command:&lt;/strong&gt; 这个是对文件的命令具体操作。&lt;code&gt;eg：cc -o file.h&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;简而言之，target这一个或多个的目标文件依赖于prerequisites中的文件，其生成规则定义在command中。&lt;/p&gt;
&lt;h3 id=&#34;make的使用技巧&#34;&gt;make的使用技巧&lt;/h3&gt;
&lt;h4 id=&#34;变量的使用&#34;&gt;变量的使用&lt;/h4&gt;
&lt;p&gt;在makefile里面也是可以使用变量的，但是这是不可变的(是不是有点矛盾),它更像是c语言里面的宏(#define)。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;boo&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这样的好处是我们可以简化我们的make文件，是它不是这么的杂乱无章。&lt;/p&gt;
&lt;h2 id=&#34;书写规则&#34;&gt;书写规则&lt;/h2&gt;
</description>
        </item>
        <item>
        <title>奇妙的位运算</title>
        <link>https://FeiNiaoBF.github.io/zh-cn/p/%E5%A5%87%E5%A6%99%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97/</link>
        <pubDate>Thu, 10 Nov 2022 21:04:43 +0800</pubDate>
        
        <guid>https://FeiNiaoBF.github.io/zh-cn/p/%E5%A5%87%E5%A6%99%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97/</guid>
        <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在计算机里面，所有的数据都是以二进制来进行存储的,
那么，我们在计算的时候不仅仅要知道十进制的计算，
也要知道二进制的计算 （+、-、*、/），这些都是叫位运算，即将符号位共同参与运算的运算。&lt;/p&gt;
&lt;h2 id=&#34;位运算的种类&#34;&gt;位运算的种类&lt;/h2&gt;
&lt;p&gt;接下来来看看有哪些运算&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;符号&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;加法&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;用二进制的方法进行加法运算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;减法&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;用二进制的方法进行加法运算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;amp;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;与运算&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;两个位都为1时，结果才为1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;|&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;或运算&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;两个位都为0时，结果才为0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;^&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;异或运算&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;两个位相同为0，相异为1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;~&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;反取&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0反1，1反0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;laquo;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;左移运算&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有二进位全部左移位，高位丢弃，低位补0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;raquo;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;右移运算&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有二进位全部右移位，对无符号数，高位补0；有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;计算方式&#34;&gt;计算方式&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;加法和减法就不再过多赘述！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;-与运算&#34;&gt;&amp;lsquo;&amp;amp;&amp;rsquo; 与运算&lt;/h3&gt;
&lt;p&gt;和&lt;code&gt;AND&lt;/code&gt;一样&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;负数&lt;/strong&gt;按&lt;em&gt;补码&lt;/em&gt;形式参加按位与运算。&lt;/p&gt;
&lt;h3 id=&#34;-或运算&#34;&gt;&amp;lsquo;|&amp;rsquo; 或运算&lt;/h3&gt;
&lt;p&gt;和&lt;code&gt;OR&lt;/code&gt;一样&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;负数&lt;/strong&gt;按 &lt;em&gt;补码&lt;/em&gt; 形式参加按位或运算。&lt;/p&gt;
&lt;h3 id=&#34;-异或运算&#34;&gt;&amp;lsquo;^&amp;rsquo; 异或运算&lt;/h3&gt;
&lt;p&gt;和&lt;code&gt;AOR&lt;/code&gt;一样&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;-取反运算&#34;&gt;&amp;lsquo;~&amp;rsquo; 取反运算&lt;/h3&gt;
&lt;p&gt;与&lt;code&gt;NOT&lt;/code&gt;一样&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;-和--左右位移运算&#34;&gt;&amp;lsquo;&amp;laquo;&amp;rsquo; 和 &amp;lsquo;&amp;raquo;&amp;rsquo; 左右位移运算&lt;/h3&gt;
&lt;p&gt;将一个运算对象的各二进制位全部&lt;code&gt;左（右）&lt;/code&gt;移若干位&lt;code&gt;左(右)边的二进制位丢弃，右边补0&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1010&lt;/span&gt; &lt;span class=&#34;mo&#34;&gt;0101&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;---------&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1001&lt;/span&gt; &lt;span class=&#34;mo&#34;&gt;0100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;---------&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mo&#34;&gt;0010&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1001&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;在进行计算的时候，计算机中的数在内存中都是以二进制形式进行存储的，用位运算就是直接对整数在内存中的二进制位进行操作，因此其执行效率非常高，在程序中尽量使用位运算进行操作，这不仅可以锻炼自己的二进制运算，还会大大提高程序的性能。&lt;/p&gt;
&lt;h2 id=&#34;外部链接&#34;&gt;外部链接&lt;/h2&gt;
&lt;p&gt;此博客参考&lt;a class=&#34;link&#34; href=&#34;https://www.runoob.com/w3cnote/bit-operation.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;菜鸟教程-C语言中的位运算&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
