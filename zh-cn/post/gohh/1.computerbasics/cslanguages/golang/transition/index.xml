<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>转 on Yeelight の 小屋</title>
        <link>https://FeiNiaoBF.github.io/zh-cn/post/gohh/1.computerbasics/cslanguages/golang/transition/</link>
        <description>Recent content in 转 on Yeelight の 小屋</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Example Person. All rights reserved.</copyright>
        <lastBuildDate>Thu, 14 Mar 2024 21:53:46 +0800</lastBuildDate><atom:link href="https://FeiNiaoBF.github.io/zh-cn/post/gohh/1.computerbasics/cslanguages/golang/transition/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Go Web的学习1</title>
        <link>https://FeiNiaoBF.github.io/zh-cn/p/go-web%E7%9A%84%E5%AD%A6%E4%B9%A01/</link>
        <pubDate>Tue, 11 Jun 2024 22:45:30 +0800</pubDate>
        
        <guid>https://FeiNiaoBF.github.io/zh-cn/p/go-web%E7%9A%84%E5%AD%A6%E4%B9%A01/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;如何通过 Go 来编写 Web&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;
&lt;h3 id=&#34;http-是什么&#34;&gt;HTTP 是什么&lt;/h3&gt;
&lt;!-- TODO LINK --&gt;
&lt;p&gt;-&amp;gt; &lt;a class=&#34;link&#34; href=&#34;https://FeiNiaoBF.github.io/zh-cn/p/http-%E6%98%AF%E4%BB%80%E4%B9%88/&#34; &gt;http 是什么&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Web 是什么，有些人认为是一个网页，有些人认为是 World Wide Web（万维网）系统，有些人认为是网路时代的代指。都没错，但为了不在下面的文字中模糊这个词，孤自认为 Web 是一个管理资源的&lt;strong&gt;服务端&lt;/strong&gt;，而 Go 所做的就是搭建这个服务端。&lt;/p&gt;
&lt;p&gt;一个 Web 服务器，它监听来自客服端的请求，并通过 &lt;strong&gt;HTTP 协议&lt;/strong&gt;将自己与客户端通信。这个客户端通常指的是 &lt;em&gt;Web Browser&lt;/em&gt;。&lt;/p&gt;
&lt;h3 id=&#34;web-服务器&#34;&gt;Web 服务器&lt;/h3&gt;
&lt;p&gt;Web 服务器的工作流程为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;监听来自客户端通过 &lt;strong&gt;TCP/IP 协议&lt;/strong&gt;建立到服务器的 TCP 连接请求&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;处理并解析&lt;/strong&gt;请求的内容，确定客户端请求的是哪个资源&lt;/li&gt;
&lt;li&gt;服务端根据请求处理的结果生成 &lt;strong&gt;HTTP 响应&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;服务端将响应和（静态/动态）资源通过互联网&lt;strong&gt;送回&lt;/strong&gt;客户端&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持久连接/非持久连接&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;restful-架构&#34;&gt;RESTful 架构&lt;/h3&gt;
&lt;p&gt;表现层状态转换（&lt;strong&gt;Representational State Transfer&lt;/strong&gt;）是根基于&lt;strong&gt;超文本传输协议（HTTP）&lt;/strong&gt; 之上而确定的一组约束和属性，是一种设计提供万维网络服务的&lt;strong&gt;软件构建风格&lt;/strong&gt;。符合或兼容于这种架构风格（简称为 REST 或 RESTful）的网络服务，允许客户端发出以&lt;strong&gt;统一资源标识符&lt;/strong&gt;访问和操作网络资源的请求，而与预先定义好的无状态操作集一致化。
&lt;img src=&#34;https://s2.loli.net/2024/05/26/IO7laRYz1WBTG94.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;URL&amp;URI&amp;URN&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每一个 &lt;strong&gt;URI&lt;/strong&gt; 代表一种资源&lt;/li&gt;
&lt;li&gt;客户端和服务器之间，传递这种资源的某种表现层&lt;/li&gt;
&lt;li&gt;客户端通过四个 HTTP 方法，对服务器端资源进行操作，实现&amp;quot;表现层状态转化&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nethttp-package&#34;&gt;net/http package&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;net/http&lt;/code&gt; 是 Go 官方的标准包&lt;/p&gt;
&lt;p&gt;🚧🚧🚧&lt;/p&gt;
&lt;p&gt;我对 net/http 的原理解析-&amp;gt; [[http package]]&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;SayHello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fprintln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Hello Go Web&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;HandleFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SayHello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ListenAndServe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;:9999&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Go 中的 http 很体贴的将一些过程抽象了，其中就只有 &lt;code&gt;ListenAndServe&lt;/code&gt; 来监听客户端的请求，&lt;code&gt;HandleFunc&lt;/code&gt;  来注册一个处理器和对应的 pattem 建立 route ，&lt;code&gt;SayHello&lt;/code&gt; 是具体的 Handler 函数。&lt;/p&gt;
&lt;p&gt;Web 工作方式的几个概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Request：用户请求的信息，用来解析用户的请求信息，包括 post、get、cookie、url 等信息&lt;/li&gt;
&lt;li&gt;Response：服务器需要反馈给客户端的信息&lt;/li&gt;
&lt;li&gt;Conn：用户的每次请求链接&lt;/li&gt;
&lt;li&gt;Handler：处理请求和生成返回信息的处理逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;外部链接&#34;&gt;外部链接&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.ruanyifeng.com/blog/2011/09/restful.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;理解RESTful架构&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Go Web的学习2</title>
        <link>https://FeiNiaoBF.github.io/zh-cn/p/go-web%E7%9A%84%E5%AD%A6%E4%B9%A02/</link>
        <pubDate>Tue, 11 Jun 2024 22:45:30 +0800</pubDate>
        
        <guid>https://FeiNiaoBF.github.io/zh-cn/p/go-web%E7%9A%84%E5%AD%A6%E4%B9%A02/</guid>
        <description>&lt;h2 id=&#34;router-框架&#34;&gt;Router 框架&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;大门管理员&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;路由功能&#34;&gt;路由功能&lt;/h3&gt;
&lt;p&gt;为了将代码模块化，而随之带来的另外一个问题是关于前端页面的跳转问题，由于代码的隔离，代码之间有时候会无法互相访问。因此需要一个&lt;strong&gt;大门管理员&lt;/strong&gt;， Router 就此实现。&lt;/p&gt;
&lt;p&gt;它负责将传入的 HTTP 请求&lt;strong&gt;映射（map）&lt;/strong&gt; 到相应的处理函数上。简单来说，路由决定了当用户访问一个特定的 URL 时，服务器应该执行哪些代码来处理这个请求。&lt;/p&gt;
&lt;p&gt;类似下面这样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;router&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// map Handler function
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;handlers&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;HandlerFunc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;因此，路由要满足一下功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;URL匹配&lt;/strong&gt;：路由框架能够识别和匹配传入请求的URL，根据URL的不同部分（如路径、查询参数等）来决定调用哪个处理函数。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;router&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;handle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Path&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;handlers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nf&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;StatusNotFound&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;404 NOT FOUND: %s\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;处理函数映射&lt;/strong&gt;：每个 URL 模式（pattern）都会被&lt;strong&gt;映射&lt;/strong&gt;到一个或多个处理函数。当请求的 URL 匹配到某个模式时，相应的处理函数就会被调用。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;router&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;router&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;addRoute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pattern&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handler&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HandlerFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Route %4s - %s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pattern&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;router&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;handlers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handler&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;参数提取&lt;/strong&gt;：对于&lt;strong&gt;动态路由&lt;/strong&gt;，如 &lt;code&gt;/user/:id&lt;/code&gt;，路由框架能够从 URL 中提取参数（如 &lt;code&gt;:id&lt;/code&gt;），并将这些参数传递给处理函数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中间件支持&lt;/strong&gt;：路由框架通常支持中间件，这些中间件可以在请求到达&lt;strong&gt;处理函数之前或之后&lt;/strong&gt;执行一些操作，如身份验证、日志记录等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;主要点&#34;&gt;主要点&lt;/h3&gt;
&lt;h4 id=&#34;query&#34;&gt;Query&lt;/h4&gt;
&lt;p&gt;在HTTP请求的上下文中，&lt;code&gt;query&lt;/code&gt; 通常指的是URL中的查询参数。查询参数是URL中&lt;code&gt;?&lt;/code&gt;后面的键值对，它们用于向服务器传递额外的信息。例如，在URL &lt;code&gt;http://example.com/search?q=golang&lt;/code&gt; 中，&lt;code&gt;q=golang&lt;/code&gt; 就是一个查询参数，其中&lt;code&gt;q&lt;/code&gt;是参数名，&lt;code&gt;golang&lt;/code&gt;是参数值。&lt;/p&gt;
&lt;h4 id=&#34;handler&#34;&gt;Handler&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Handler&lt;/code&gt; 或 &lt;code&gt;Request Handler&lt;/code&gt; 是指处理HTTP请求的函数或方法。在大多数后端框架中，包括Go语言的许多Web框架（如Gin、Echo、net/http等），&lt;code&gt;handler&lt;/code&gt; 是一个函数，它接收HTTP请求并返回HTTP&lt;strong&gt;响应&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;封装&#34;&gt;封装&lt;/h3&gt;
&lt;p&gt;在 Web 服务中，封装可以用来简化 HTTP&lt;strong&gt;请求&lt;/strong&gt;和&lt;strong&gt;响应&lt;/strong&gt;的处理。对于原始的方式需要手动设置 &lt;em&gt;HTTP Header&lt;/em&gt;、&lt;em&gt;状态码&lt;/em&gt;和&lt;em&gt;消息体&lt;/em&gt; 等等，而封装后的方法则提供了一个更简洁的接口，只需调用一个函数就可以完成所有这些设置。&lt;/p&gt;
&lt;h4 id=&#34;context-结构&#34;&gt;Context 结构&lt;/h4&gt;
&lt;p&gt;在Web框架中，Context通常是一个结构体，它包含了处理HTTP请求和响应所需的所有信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;统一接口&lt;/strong&gt;：通过Context，可以将所有与请求相关的信息集中管理，使得处理函数和中间件可以方便地访问这些信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态路由支持&lt;/strong&gt;：Context 可以存储动态路由解析后的参数，使得这些参数可以在处理函数中直接使用。[[#动态路由]]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中间件支持&lt;/strong&gt;：中间件可以在Context中添加或修改信息，这些信息可以被后续的处理函数使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Context 随着每一个请求的出现而产生，请求的结束而销毁，和当前请求强相关的信息都应由 Context 承载。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Context 结构体用于封装HTTP请求和响应的相关信息
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;Res&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ResponseWriter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;Req&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;Path&lt;/span&gt;       &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;Method&lt;/span&gt;     &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;StatusCode&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在 Go 中的Context&lt;/p&gt;
&lt;h4 id=&#34;api-设计&#34;&gt;API 设计&lt;/h4&gt;
&lt;p&gt;🚧🚧🚧🚧🚧🚧🚧🚧🚧&lt;/p&gt;
&lt;h3 id=&#34;动态路由&#34;&gt;动态路由&lt;/h3&gt;
&lt;p&gt;动态路由是指路由中的某些部分是可变的，例如 &lt;code&gt;/hello/:name&lt;/code&gt; 中的 &lt;code&gt;:name&lt;/code&gt; 部分。当请求匹配到这个路由时，&lt;code&gt;:name&lt;/code&gt; 会被替换为实际的值。在 Context 结构中，这些动态参数通常会被存储起来，以便在处理函数中使用。&lt;/p&gt;
&lt;p&gt;为了保存这些 &lt;code&gt;pattern&lt;/code&gt; 我们有许多的协议和数据结构，常用 &lt;code&gt;Trie-Tree&lt;/code&gt; 来作 pattern 的底层结构。&lt;/p&gt;
&lt;p&gt;了解 &lt;code&gt;pattern&lt;/code&gt; 参数，其中 pattern 就是在路由器中预先定义的一组规则&lt;strong&gt;模式&lt;/strong&gt; ，用来和用户输入的 URL 匹配。&lt;/p&gt;
&lt;p&gt;一般有三种模糊匹配路由规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;:name&lt;/code&gt; &amp;mdash;- &lt;strong&gt;命名匹配规则&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*any&lt;/code&gt;   &amp;mdash;- &lt;strong&gt;模糊匹配规&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{field}&lt;/code&gt; &amp;mdash;- &lt;strong&gt;字段匹配规则&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;node&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;c1&#34;&gt;//待匹配路由
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pattern&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;c1&#34;&gt;// important fields
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;part&lt;/span&gt;     &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nx&#34;&gt;children&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;node&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;c1&#34;&gt;// node color (isKey)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// *any | :xxx
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;isWildcard&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PatRoot&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;root&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;node&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;要点&#34;&gt;要点&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pattern（模式）&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模式是指在路由器中预先定义的一组规则，用于匹配传入的HTTP请求的URL路径。这些模式通常包含静态路径部分和动态路径部分（如参数或通配符）。例如，模式 &lt;code&gt;/user/:id&lt;/code&gt; 表示一个用户详情页，其中 &lt;code&gt;:id&lt;/code&gt; 是一个参数，可以匹配任何用户ID。&lt;/li&gt;
&lt;li&gt;在您的代码中，&lt;code&gt;pattern&lt;/code&gt; 是 &lt;code&gt;router&lt;/code&gt; 结构体中的一个字段，用于存储每个HTTP方法对应的路由树（&lt;code&gt;PatRoot&lt;/code&gt;）。这些路由树是根据预定义的模式构建的，用于快速匹配传入的请求路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;URL（统一资源定位符）&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URL 是客户端（如浏览器）发送给服务器的实际请求路径。它是一个具体的字符串，指定了请求的资源在服务器上的位置。例如，&lt;code&gt;/user/123&lt;/code&gt; 是一个URL，它请求ID为123的用户详情页。&lt;/li&gt;
&lt;li&gt;在您的代码中，&lt;code&gt;URL&lt;/code&gt; 是通过 &lt;code&gt;Context&lt;/code&gt; 对象传递的，它是处理HTTP请求时的一个关键部分。&lt;code&gt;getRoute&lt;/code&gt; 方法使用这个URL来在路由树中查找匹配的模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一种是对 httpRouter 进行简单的封装，然后提供定制的中间件和一些简单的小工具集成比如 gin，主打轻量，易学，高性能。第二种是借鉴其它语言的编程风格的一些 MVC 类框架，例如 beego，方便从其它语言迁移过来的程序员快速上手，快速开发。还有一些框架功能更为强大，除了数据库 schema 设计，大部分代码直接生成，例如 goa。不管哪种框架，适合开发者背景的就是最好的。&lt;/p&gt;
&lt;p&gt;根据我们的经验，简单地来说，只要你的路由带有参数，并且这个项目的 API 数目超过了 10，就尽量不要使用 &lt;code&gt;net/http&lt;/code&gt; 中默认的路由。&lt;/p&gt;
&lt;h2 id=&#34;外部链接&#34;&gt;外部链接&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://chai2010.cn/advanced-go-programming-book/ch5-web/ch5-02-router.html#52-router-%E8%AF%B7%E6%B1%82%E8%B7%AF%E7%94%B1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;router 请求路由&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Go Web的学习3</title>
        <link>https://FeiNiaoBF.github.io/zh-cn/p/go-web%E7%9A%84%E5%AD%A6%E4%B9%A03/</link>
        <pubDate>Tue, 11 Jun 2024 22:45:30 +0800</pubDate>
        
        <guid>https://FeiNiaoBF.github.io/zh-cn/p/go-web%E7%9A%84%E5%AD%A6%E4%B9%A03/</guid>
        <description>&lt;h2 id=&#34;分组控制-group&#34;&gt;分组控制 （Group）&lt;/h2&gt;
&lt;p&gt;说到 &lt;strong&gt;GROUP&lt;/strong&gt; 我就想起来 MySQL 中的 SQL 语句  &lt;code&gt;GROUP BY&lt;/code&gt;，他们本质上不一样但其实想做的事情就是分组，这里的分组是路由分组。&lt;/p&gt;
&lt;h3 id=&#34;意义-为什么需要分组&#34;&gt;意义-为什么需要分组&lt;/h3&gt;
&lt;p&gt;分组是在 Web 框架中组织和管理路由的技术之一。比如当我有 &lt;code&gt;/hello/x&lt;/code&gt; 、&lt;code&gt;/hello/y&lt;/code&gt; 、&lt;code&gt;/hello/z&lt;/code&gt; 三个不同的 pattern 时，我不想写三个不同的 handler 来处理（假设 handler 也是做相似的），你会发现他们的前缀路由相同，在这样的一种情况下，我需要复用 handler，你会想不如打包在一起组织起来一同管理。
这种技术它允许开发者将相关的路由分组在一起，以便更好地&lt;strong&gt;组织代码&lt;/strong&gt;、&lt;strong&gt;共享中间件&lt;/strong&gt;、&lt;strong&gt;统一处理路径前缀&lt;/strong&gt;等。也可以提高代码的可读性、可维护性和可扩展性。&lt;/p&gt;
&lt;h3 id=&#34;更好的管理&#34;&gt;更好的管理&lt;/h3&gt;
&lt;p&gt;例如 &lt;code&gt;/hello&lt;/code&gt; 是一个分组，&lt;code&gt;/hello/a&lt;/code&gt; 和 &lt;code&gt;/hello/b&lt;/code&gt; 可以是该分组下的&lt;strong&gt;子分组 (Subgroup)&lt;/strong&gt;。作用在 &lt;code&gt;/hello&lt;/code&gt; 分组上的中间件(middleware)，也都会作用在子分组，子分组还可以应用自己特有的中间件。&lt;/p&gt;
&lt;p&gt;🚧🚧🚧&lt;/p&gt;
&lt;h2 id=&#34;中间件-middleware&#34;&gt;中间件 （Middleware）&lt;/h2&gt;
&lt;p&gt;中间件（Middleware）是一个&lt;strong&gt;软件层&lt;/strong&gt;，是一些技术类组件的统称，它位于应用程序和底层服务（如操作系统、网络协议栈或数据库）之间，也允许用户自己定义功能，嵌入到框架服务中，提供通用服务。中间件的主要目的是简化应用程序开发，通过提供可重用的、跨应用程序的功能来减少开发工作量。&lt;/p&gt;
&lt;p&gt;中间件可以提供多种服务，包括但不限于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;通信服务&lt;/strong&gt;：允许不同的应用程序或组件通过网络进行通信。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据管理&lt;/strong&gt;：提供数据存储、检索和管理的抽象层，如数据库中间件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消息传递&lt;/strong&gt;：支持异步消息传递，如消息队列或发布/订阅系统。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事务处理&lt;/strong&gt;：确保分布式系统中的事务完整性和一致性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全性&lt;/strong&gt;：提供认证、授权、加密和审计等安全功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集成&lt;/strong&gt;：帮助不同的应用程序和系统集成，如企业服务总线（ESB）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用服务器&lt;/strong&gt;：提供运行时环境和支持服务，如Java EE应用服务器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API网关&lt;/strong&gt;：作为微服务架构中的单一入口点，处理请求路由、组合和协议转换。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存&lt;/strong&gt;：提供数据缓存服务以提高性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;日志和监控&lt;/strong&gt;：收集和分析应用程序的日志和性能数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;怎么使用中间件需要考虑2个比较关键的点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;插入点在哪合适&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中间件的参数&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Go Web的学习4</title>
        <link>https://FeiNiaoBF.github.io/zh-cn/p/go-web%E7%9A%84%E5%AD%A6%E4%B9%A04/</link>
        <pubDate>Tue, 11 Jun 2024 22:45:30 +0800</pubDate>
        
        <guid>https://FeiNiaoBF.github.io/zh-cn/p/go-web%E7%9A%84%E5%AD%A6%E4%B9%A04/</guid>
        <description>&lt;h2 id=&#34;模板-template&#34;&gt;模板 （Template）&lt;/h2&gt;
&lt;p&gt;模板是在 Web 框架后端对支持服务端渲染的技术&lt;/p&gt;
&lt;p&gt;学习这个需要对前端有一点的认识&lt;/p&gt;
&lt;h3 id=&#34;静态资源文件&#34;&gt;静态资源文件&lt;/h3&gt;
&lt;h3 id=&#34;html-文件&#34;&gt;HTML 文件&lt;/h3&gt;
&lt;p&gt;🚧🚧🚧&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
