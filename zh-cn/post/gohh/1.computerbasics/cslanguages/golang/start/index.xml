<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>起 on Yeelight の 小屋</title>
        <link>https://FeiNiaoBF.github.io/zh-cn/post/gohh/1.computerbasics/cslanguages/golang/start/</link>
        <description>Recent content in 起 on Yeelight の 小屋</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Example Person. All rights reserved.</copyright>
        <lastBuildDate>Thu, 14 Mar 2024 21:53:46 +0800</lastBuildDate><atom:link href="https://FeiNiaoBF.github.io/zh-cn/post/gohh/1.computerbasics/cslanguages/golang/start/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>运算操作符</title>
        <link>https://FeiNiaoBF.github.io/zh-cn/p/%E8%BF%90%E7%AE%97%E6%93%8D%E4%BD%9C%E7%AC%A6/</link>
        <pubDate>Mon, 20 May 2024 10:54:30 +0800</pubDate>
        
        <guid>https://FeiNiaoBF.github.io/zh-cn/p/%E8%BF%90%E7%AE%97%E6%93%8D%E4%BD%9C%E7%AC%A6/</guid>
        <description>&lt;h2 id=&#34;运算操作符&#34;&gt;运算操作符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;算术运算符：如加减乘除等。&lt;/li&gt;
&lt;li&gt;位运算符：如按位与、或、异或等。&lt;/li&gt;
&lt;li&gt;比较运算符：如等于、不等于、大于、小于等。&lt;/li&gt;
&lt;li&gt;布尔运算符：如逻辑与、或、非。&lt;/li&gt;
&lt;li&gt;字符串衔接运算符：用于连接字符串。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;满足二元条件&#34;&gt;满足二元条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;操作数必须类型相同或可隐式转换。&lt;/li&gt;
&lt;li&gt;类型不确定的操作数需能表示为类型确定操作数的类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;z&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mb&#34;&gt;0b1101&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;^&lt;/span&gt; &lt;span class=&#34;mb&#34;&gt;0b0001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;z: %b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 1100
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;满足一元条件&#34;&gt;满足一元条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;操作数类型确定&lt;/li&gt;
&lt;li&gt;操作数类型可以被隐式转换&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一元条件：
&lt;strong&gt;&lt;code&gt;^&lt;/code&gt; 位反（或位补)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类型为数字型常量所表示的值是&lt;strong&gt;不能溢出&lt;/strong&gt;它的类型的表示范围的。&lt;/li&gt;
&lt;li&gt;类型为不确定数字型常量所表示的值是可以溢出它的默认类型的表示范围的。此数值&lt;strong&gt;不会被截断&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;将一个非常量数字型转换为其它数字类型时，此非常量数字值&lt;strong&gt;可以溢出转化结果的类型&lt;/strong&gt;。 在此转换中，当溢出发生时，转化结果为此非常量数字值的截断表示。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数值运算符&#34;&gt;数值运算符&lt;/h2&gt;
&lt;h3 id=&#34;除法和余数运算&#34;&gt;除法和余数运算&lt;/h3&gt;
&lt;p&gt;如果除数 &lt;code&gt;y&lt;/code&gt; 是一个常量，则它必须不为0，否则编译不通过。如果它是一个整数型非常量，则在运行时刻将抛出一个&lt;strong&gt;panic&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果除数 &lt;code&gt;y&lt;/code&gt; 为一个非整数型的非常量，则运算结果为一个无穷大（Inf，当被除数不为0时）或者 &lt;code&gt;NaN&lt;/code&gt;（not a number，当被除数为0时）&lt;/p&gt;
&lt;h3 id=&#34;自增和自减操作符&#34;&gt;自增和自减操作符&lt;/h3&gt;
&lt;p&gt;Go 支持自增（&lt;code&gt;++&lt;/code&gt;）和自减（&lt;code&gt;--&lt;/code&gt;）操作符。
但是，自增（&lt;code&gt;a++&lt;/code&gt;）和自减（&lt;code&gt;a--&lt;/code&gt;）操作&lt;strong&gt;没有返回值&lt;/strong&gt;，所以它们不能当做 &lt;em&gt;表达式&lt;/em&gt; 来使用。另一个显著区别是，在 Go 中，自增（&lt;code&gt;++&lt;/code&gt;）和自减（&lt;code&gt;--&lt;/code&gt;）操作符只能后置，不能前&lt;/p&gt;
&lt;h2 id=&#34;字符串衔接运算符&#34;&gt;字符串衔接运算符&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;lang&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果一个字符串衔接运算中的一个操作值为类型确定的，则结果字符串是一个类型和此操作数类型相同的类型确定值。否则，结果字符串是一个类型不确定值（肯定是一个常量）。&lt;/p&gt;
&lt;h3 id=&#34;操作符运算的优先级&#34;&gt;操作符运算的优先级&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;&amp;amp;^&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;^&lt;/span&gt;               &lt;span class=&#34;c1&#34;&gt;// 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;                          &lt;span class=&#34;c1&#34;&gt;// 4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;                          &lt;span class=&#34;c1&#34;&gt;// 5
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;移位运算&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;和&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;的优先级比加减法&lt;code&gt;+&lt;/code&gt;和&lt;code&gt;-&lt;/code&gt;的优先级要高。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>关键字与标识符</title>
        <link>https://FeiNiaoBF.github.io/zh-cn/p/%E5%85%B3%E9%94%AE%E5%AD%97%E4%B8%8E%E6%A0%87%E8%AF%86%E7%AC%A6/</link>
        <pubDate>Mon, 20 May 2024 10:37:53 +0800</pubDate>
        
        <guid>https://FeiNiaoBF.github.io/zh-cn/p/%E5%85%B3%E9%94%AE%E5%AD%97%E4%B8%8E%E6%A0%87%E8%AF%86%E7%AC%A6/</guid>
        <description>&lt;h2 id=&#34;25个关键字&#34;&gt;25个关键字&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;     &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;      &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;    &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt;      &lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;      &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;        &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt;      &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;         &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt;    &lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt;     &lt;span class=&#34;k&#34;&gt;fallthrough&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;      &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt;      &lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;          &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;     &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;规定的标识符unicode-字符&#34;&gt;规定的标识符（Unicode 字符）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;标识符由字母（Unicode字母，包括中文等）、数字和下划线（&lt;code&gt;_&lt;/code&gt;）组成。&lt;/li&gt;
&lt;li&gt;标识符的第一个字符必须是字母或下划线。&lt;/li&gt;
&lt;li&gt;标识符区分大小写，例如&lt;code&gt;count&lt;/code&gt;和&lt;code&gt;Count&lt;/code&gt;是两个不同的标识符。&lt;/li&gt;
&lt;li&gt;标识符不能是Go语言的关键字。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：
中文的标识符是 &lt;code&gt;private&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Strings</title>
        <link>https://FeiNiaoBF.github.io/zh-cn/p/strings/</link>
        <pubDate>Mon, 13 May 2024 09:10:39 +0800</pubDate>
        
        <guid>https://FeiNiaoBF.github.io/zh-cn/p/strings/</guid>
        <description>&lt;h2 id=&#34;utf-8-编码和-unicode-文本区别&#34;&gt;UTF-8 编码和 Unicode 文本区别&lt;/h2&gt;
&lt;p&gt;在 Golang 中字符串的底层结构字节使用 UTF-8 编码来表示 Unicode 文本&lt;/p&gt;
&lt;p&gt;其中 &lt;em&gt;Unicode&lt;/em&gt; 是一个&lt;strong&gt;字符集&lt;/strong&gt;，定义了字符和它们的唯一&lt;strong&gt;代码点&lt;/strong&gt;，而 &lt;em&gt;UTF-8&lt;/em&gt; 是一种&lt;strong&gt;编码方式&lt;/strong&gt;，用于将 Unicode 字符表示为字节序列。&lt;/p&gt;
&lt;h2 id=&#34;字符串&#34;&gt;字符串&lt;/h2&gt;
&lt;p&gt;Go 语言中的字符串值是一个可空的&lt;strong&gt;字节序列&lt;/strong&gt;，字节序列中的字节个数称为该字符串的长度。String 类型其实是一个&amp;quot;&lt;strong&gt;描述符&lt;/strong&gt;”，它本身并不真正存储字符串数据，而是由一个指向底层存储的指针和字符串的长度字段组成的&lt;/p&gt;
</description>
        </item>
        <item>
        <title>数据结构和理论知识</title>
        <link>https://FeiNiaoBF.github.io/zh-cn/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/</link>
        <pubDate>Mon, 13 May 2024 09:10:19 +0800</pubDate>
        
        <guid>https://FeiNiaoBF.github.io/zh-cn/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/</guid>
        <description>&lt;h2 id=&#34;go-语言中的数据结构&#34;&gt;Go 语言中的数据结构&lt;/h2&gt;
&lt;h3 id=&#34;基础数据结构&#34;&gt;基础数据结构&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;数组（Array）&lt;/strong&gt; - 由固定长度的相同类型元素组成的数据结构。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;切片（Slice）&lt;/strong&gt; - 由数组构成的动态长度序列，提供了更灵活的操作方式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;映射（Map）&lt;/strong&gt; - 存储键值对的集合，用于快速检索数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结构体（Struct）&lt;/strong&gt; - 可以包含不同类型字段的复合数据类型。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;其他数据结构和类型&#34;&gt;其他数据结构和类型&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;通道（Channel）&lt;/strong&gt; - 用于在 Go 协程之间进行通信的类型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;接口（Interface）&lt;/strong&gt; - 定义对象的行为，是一种抽象类型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;指针（Pointer）&lt;/strong&gt; - 存储变量的内存地址，用于直接访问内存中的值。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;命名规范&#34;&gt;命名规范&lt;/h2&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;首字母大小写：&lt;/strong&gt; 以大写字母开头的标识符是 &lt;strong&gt;public&lt;/strong&gt; 的（可导出的），可以被其他包访问。以小写字母开头的标识符是私有的，只能在当前包内访问。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 Go 语言中，有一些命名规范适用于不同的命名情况。以下是一些常见的命名规范：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;包名&lt;/strong&gt;：包名应该使用单数形式，且应该是小写的，例如 &lt;code&gt;utils&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件名&lt;/strong&gt;：文件名应该全部使用小写字母，可以包含下划线 &lt;code&gt;_&lt;/code&gt;，例如 &lt;code&gt;my_file.go&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;变量&lt;/strong&gt;：变量名使用驼峰命名法，例如 &lt;code&gt;myVariable&lt;/code&gt;。私有变量的命名应该以小写字母开头，公共变量则以大写字母开头。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;常量&lt;/strong&gt;：常量的命名应该全部使用大写字母，可以包含下划线 &lt;code&gt;_&lt;/code&gt;，例如 &lt;code&gt;MAX_SIZE&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;函数&lt;/strong&gt;：函数名同样使用驼峰命名法，例如 &lt;code&gt;calculateTotal&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结构体&lt;/strong&gt;：结构体的命名同样使用驼峰命名法，例如 &lt;code&gt;type MyStruct struct&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;接口&lt;/strong&gt;：接口的命名同样使用驼峰命名法，例如 &lt;code&gt;type MyInterface interface&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;枚举&lt;/strong&gt;：枚举的命名同样使用驼峰命名法，例如 &lt;code&gt;type Color int&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;目前（Go 1.21），Go 有 26 个类型种类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;类型&#34;&gt;类型&lt;/h2&gt;
&lt;h3 id=&#34;类型定义type-definition-declaration&#34;&gt;类型定义（type definition declaration）&lt;/h3&gt;
&lt;p&gt;用如下形式来定义新的类型。&lt;code&gt;type&lt;/code&gt;为一个关键字。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 定义单个类型。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NewTypeName&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SourceType&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 定义多个类型（将多个类型描述合并在一个声明中）。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nx&#34;&gt;NewTypeName1&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SourceType1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nx&#34;&gt;NewTypeName2&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SourceType2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;一个新定义的类型和它的源类型为两个不同的类型。&lt;/li&gt;
&lt;li&gt;在两个不同的类型定义中所定义的两个类型肯定是两个不同的类型。&lt;/li&gt;
&lt;li&gt;一个新定义的类型和它的源类型的底层类型一致并且它们的值可以相互显式转换。&lt;/li&gt;
&lt;li&gt;类型定义可以出现在函数体内（局部）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;具名类型named-type&#34;&gt;具名类型(named type)&lt;/h3&gt;
&lt;p&gt;一个具名类型可能为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个预声明类型；&lt;/li&gt;
&lt;li&gt;一个定义（非自定义泛型）类型；&lt;/li&gt;
&lt;li&gt;一个（泛型类型的）实例化类型；&lt;/li&gt;
&lt;li&gt;一个类型参数类型（使用在自定义泛型中）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其它类型称为&lt;em&gt;无名类型&lt;/em&gt;。一个无名类型肯定是一个&lt;em&gt;组合类型&lt;/em&gt;。
&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/32983546/named-and-unnamed-types&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Named and Unnamed Types&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;类型别名声明&#34;&gt;类型别名声明&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nx&#34;&gt;Age&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Table&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Age&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;map[string]int&lt;/code&gt; 和 &lt;code&gt;map[Name]Age&lt;/code&gt; 表示同一类型&lt;/p&gt;
&lt;h3 id=&#34;底层类型underlying-type&#34;&gt;底层类型（underlying type）&lt;/h3&gt;
&lt;p&gt;规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个内置类型的底层类型为它自己。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unsafe&lt;/code&gt;标准库包中定义的&lt;code&gt;Pointer&lt;/code&gt;类型的底层类型是它自己。&lt;code&gt;unsafe.Pointer&lt;/code&gt;也被视为一个内置类型。&lt;/li&gt;
&lt;li&gt;一个无名类型（必为一个组合类型）的底层类型为它自己。&lt;/li&gt;
&lt;li&gt;在一个类型声明中，新声明的类型和源类型共享底层类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 这四个类型的底层类型均为内置类型int。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nx&#34;&gt;MyInt&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nx&#34;&gt;Age&lt;/span&gt;   &lt;span class=&#34;nx&#34;&gt;MyInt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 下面这三个新声明的类型的底层类型各不相同。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nx&#34;&gt;IntSlice&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// 底层类型为[]int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MyIntSlice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MyInt&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 底层类型为[]MyInt
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;AgeSlice&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Age&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// 底层类型为[]Age
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 类型[]Age、Ages和AgeSlice的底层类型均为[]Age。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Ages&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;AgeSlice&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;在-go-中&#34;&gt;在 Go 中&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;底层类型为内置类型&lt;code&gt;bool&lt;/code&gt;的类型称为&lt;strong&gt;布尔类型&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;底层类型为任一内置整数类型的类型称为&lt;strong&gt;整数类型&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;底层类型为内置类型&lt;code&gt;float32&lt;/code&gt;或者&lt;code&gt;float64&lt;/code&gt;的类型称为&lt;strong&gt;浮点数类型&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;底层类型为内置类型&lt;code&gt;complex64&lt;/code&gt;或&lt;code&gt;complex128&lt;/code&gt;的类型称为&lt;strong&gt;复数类型&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;整数类型、浮点数类型和复数类型统称为&lt;strong&gt;数字值类型&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;底层类型为内置类型&lt;code&gt;string&lt;/code&gt;的类型称为&lt;strong&gt;字符串类型&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;值value&#34;&gt;值（value）&lt;/h2&gt;
&lt;p&gt;一个类型的一个&lt;strong&gt;实例&lt;/strong&gt;称为此类型的一个值。一个类型可以有很多不同的值，其中一个为它的零值。同一类型的不同值共享很多相同的属性。&lt;/p&gt;
&lt;p&gt;每个类型有一个零值。一个类型的零值可以看作是此类型的默认值。预声明的标识符 &lt;code&gt;nil&lt;/code&gt; 可以看作是切片、映射、函数、通道、指针（包括非类型安全指针）和接口类型的零值的字面量表示。&lt;/p&gt;
&lt;p&gt;值分为类型确定的和类型不确定的。&lt;/p&gt;
&lt;h2 id=&#34;其他概念&#34;&gt;其他概念&lt;/h2&gt;
&lt;h3 id=&#34;指针类型的基类型base-type&#34;&gt;指针类型的基类型（base type）&lt;/h3&gt;
&lt;p&gt;若一个指针类型的底层类型表示为 &lt;code&gt;*T&lt;/code&gt;，则此指针类型的基类型为 &lt;code&gt;T&lt;/code&gt; 所表示的类型。&lt;/p&gt;
&lt;h3 id=&#34;结构体类型的字段field&#34;&gt;结构体类型的字段（field）&lt;/h3&gt;
&lt;p&gt;一个结构体类型由若干成员变量组成。每个这样的成员变量称为此结构体的一个字段。&lt;/p&gt;
&lt;h3 id=&#34;函数类型的签名signature&#34;&gt;函数类型的签名（signature）&lt;/h3&gt;
&lt;p&gt;一个函数和其类型的签名由此函数的&lt;strong&gt;输入参数&lt;/strong&gt;和&lt;strong&gt;返回结果&lt;/strong&gt;的类型列表组成。函数名称和函数体不属于函数签名的构成部分。
如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nf&#34;&gt;Write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;类型的方法method和方法集method-set&#34;&gt;类型的方法（method）和方法集（method set）&lt;/h3&gt;
&lt;p&gt;在 Go 中，我们可以给满足某些条件的类型（构造器）声明方法。方法也常被称为成员函数。一个类型的所有方法组成了此类型的&lt;strong&gt;方法集&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;接口类型的动态类型和动态值&#34;&gt;接口类型的动态类型和动态值&lt;/h3&gt;
&lt;p&gt;接口类型的值称为&lt;strong&gt;接口值&lt;/strong&gt;。一个接口值可以包裹装载一个非接口值。&lt;em&gt;包裹在一个接口值中的非接口值称为此接口值的动态值&lt;/em&gt;。此动态值的类型称为此接口值的动态类型。 一个什么也没包裹的接口值为一个零值接口值。零值接口值的动态值和动态类型均为不存在。
一个接口类型可以指定若干个（可以是零个）方法，这些方法形成了此接口类型的方法集。
如果一个类型（可以是接口或者非接口类型）的方法集是一个接口类型的方法集的超集，则我们说此类型实现了此接口类型。&lt;/p&gt;
&lt;h3 id=&#34;一个值的具体类型concrete-type和具体值concrete-value&#34;&gt;一个值的具体类型（concrete type）和具体值（concrete value）&lt;/h3&gt;
&lt;p&gt;对于一个（类型确定的）非接口值，它的具体类型就是它的类型，它的具体值就是它自己。
一个 &lt;em&gt;零值接口值&lt;/em&gt; 没有具体类型和具体值。对于一个非零值接口值，它的具体类型和具体值就是它的动态类型和动态值。&lt;/p&gt;
&lt;h3 id=&#34;容器类型&#34;&gt;容器类型&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;数组&lt;/strong&gt; &lt;code&gt;[]int&lt;/code&gt;、&lt;strong&gt;切片&lt;/strong&gt; &lt;code&gt;slice&lt;/code&gt; 和&lt;strong&gt;映射&lt;/strong&gt; &lt;code&gt;map&lt;/code&gt; 是 Go 中的三种正式意义上的内置容器类型。
有时候，&lt;strong&gt;字符串&lt;/strong&gt;和&lt;strong&gt;通道类型&lt;/strong&gt;也可以被非正式地看作是容器类型。
（正式和非正式的）容器类型的每个值都有一个&lt;strong&gt;长度属性&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;映射类型的键值key类型&#34;&gt;映射类型的键值（key）类型&lt;/h3&gt;
&lt;p&gt;如果一个映射类型的底层类型表示为 &lt;code&gt;map[Tkey]T&lt;/code&gt;，则此映射类型的键值类型为 &lt;code&gt;Tkey&lt;/code&gt;。 &lt;code&gt;Tkey&lt;/code&gt; 必须为一个&lt;strong&gt;可比较类型&lt;/strong&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;容器类型的元素element类型&#34;&gt;容器类型的元素（element）类型&lt;/h3&gt;
&lt;p&gt;存储在一个容器值中的所有元素的类型必须为同一个类型。此同一类型称为此容器值的（容器）类型的元素类型。&lt;/p&gt;
&lt;h3 id=&#34;通道类型的方向&#34;&gt;通道类型的方向&lt;/h3&gt;
&lt;p&gt;一个通道值可以被看作是 &lt;strong&gt;先入先出（first-in-first-out，FIFO）&lt;/strong&gt; 队列。一个通道值可能是可读可写的、只读的（receive-only）或者只写的（send-only）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个可读可写的通道值也称为一个双向通道。 一个双向通道类型的底层类型可以被表示为&lt;code&gt;chan T&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;我们只能向一个只写的通道值发送数据，而不能从其中接收数据。 只写通道类型的底层类型可以被表示为&lt;code&gt;chan&amp;lt;- T&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;我们只能从一个只读的通道值接收数据，而不能向其发送数据。 只读通道类型的底层类型可以被表示为&lt;code&gt;&amp;lt;-chan T&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;可比较类型和不可比较类型&#34;&gt;可比较类型和不可比较类型&lt;/h3&gt;
&lt;p&gt;目前（&lt;del&gt;Go 1.21&lt;/del&gt;），下面这些类型的值不支持（使用 &lt;code&gt;==&lt;/code&gt; 和 &lt;code&gt;!=&lt;/code&gt; 运算标识符）比较。这些类型称为 &lt;em&gt;不可比较类型&lt;/em&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;切片类型&lt;/li&gt;
&lt;li&gt;映射类型&lt;/li&gt;
&lt;li&gt;函数类型&lt;/li&gt;
&lt;li&gt;任何包含有不可比较类型的字段的结构体类型和任何元素类型为不可比较类型的数组类型。
其它类型称为可比较类型。
映射类型的键值类型必须为可比较类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;外部链接&#34;&gt;外部链接&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://gfw.go101.org/article/type-system-overview.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Go 101&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Go学习资源</title>
        <link>https://FeiNiaoBF.github.io/zh-cn/p/go%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/</link>
        <pubDate>Mon, 13 May 2024 09:08:51 +0800</pubDate>
        
        <guid>https://FeiNiaoBF.github.io/zh-cn/p/go%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/</guid>
        <description>&lt;h2 id=&#34;入门资料&#34;&gt;入门资料&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://go.dev/doc/effective_go&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;官方Docs&lt;/a&gt; ，官方的文档是最好的入门资料，强烈推荐看，如果可以完整看完、理解并实践的话说明就吃透 Go 语言了。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://gobyexample.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Go by Example&lt;/a&gt;，是一个集合了 Go 语言基础类型、特性等众多示例的网站，你可以通过这些实例来初步了解和学习 Go 语言的使用。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://quii.gitbook.io/learn-go-with-tests&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Learn GO with Tests&lt;/a&gt;，该网址是通过使用 Test 来学习 Go 的开源书籍，在其中作者将以如何使用 Go 自带的 &lt;code&gt;testing&lt;/code&gt; 库来一步一步的认识 Go 语言当中的类型和其他特性。从中将学习到 &lt;strong&gt;TDD&lt;/strong&gt; 的技术、Go 语言的单元测试、学习测试驱动开发等，很大的提升自己的 Go 语言的使用和开发&lt;/p&gt;
&lt;h2 id=&#34;社交平台&#34;&gt;社交平台&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.reddit.com/r/golang/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Reddit 上的go社区&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;书籍推荐&#34;&gt;书籍推荐&lt;/h2&gt;
&lt;h3 id=&#34;电子书&#34;&gt;电子书&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.yuque.com/aceld/golang&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Golang修养之路&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://draveness.me/golang/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Go 语言设计与实现&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://golang.halfiisland.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Golang中文学习文档站&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://golang.design/under-the-hood/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Go 语言原本&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://gfw.go101.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Go语言101&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;实体书&#34;&gt;实体书&lt;/h3&gt;
&lt;h2 id=&#34;github-stars&#34;&gt;Github stars&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/stars/FeiNiaoBF/lists/golang&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Starred to github&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>学习之路</title>
        <link>https://FeiNiaoBF.github.io/zh-cn/p/%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/</link>
        <pubDate>Mon, 13 May 2024 09:08:32 +0800</pubDate>
        
        <guid>https://FeiNiaoBF.github.io/zh-cn/p/%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/</guid>
        <description>&lt;h2 id=&#34;hello-golang&#34;&gt;Hello, Golang&lt;/h2&gt;
&lt;p&gt;Go 语言是 Google 开发的一种&lt;strong&gt;静态强类型&lt;/strong&gt;、&lt;strong&gt;编译型&lt;/strong&gt;、&lt;strong&gt;并发型&lt;/strong&gt;，并具有&lt;strong&gt;垃圾回收功能&lt;/strong&gt;的编程语言。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;下载地址：&lt;a class=&#34;link&#34; href=&#34;https://go.dev/dl/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Downloads - The Go Programming Language&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;快速开始&#34;&gt;快速开始&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;下载 Go 到你的学习机上，检查 go 的现状&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;go version
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在你喜欢的 Workspace 上 Create a new directory&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir gowork
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;添加一个名为 &lt;code&gt;hello.go&lt;/code&gt; 的文件，在其中输入代码&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;In vim, vscode &amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello, world&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;In shell&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;package main
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;import &amp;#34;&lt;/span&gt;fmt&lt;span class=&#34;s2&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;func main() {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt; fmt.Println(&amp;#34;&lt;/span&gt;Hello, world&lt;span class=&#34;s2&#34;&gt;&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;}&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; hello.go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;运行它&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;go run hell.go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Welcome to Go!&lt;/p&gt;
&lt;h2 id=&#34;其他&#34;&gt;其他&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2024/05/06/pE3MQOLJI2lNGRY.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
